Runtime: 48 ms, faster than 10.89% of C++ online submissions for Product of Array Except Self.
Memory Usage: 12.8 MB, less than 39.39% of C++ online submissions for Product of Array Except Self.
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        
        vector<int> left(n,1);
        vector<int> right(n,1);
        vector<int> res(n,1);
        for (int i = 1; i < n; i++) {
            left[i] *= left[i - 1] * nums[i - 1];
            //cout<<"left "<<i<<" "<<left[i]<<endl;
        }
        for (int i = n - 1; i > 0; i--) {
            right[i - 1] *= right[i] * nums[i];
            //cout<<"right "<<i-1<<right[i-1]<<endl;
        }
        for (int i = 0; i < n; i++)
            res[i] = left[i] * right[i];
        //res[0] = right[1];
        //res[n - 1] = left[n - 2];
        return res;
    }
};

Runtime: 44 ms, faster than 38.59% of C++ online submissions for Product of Array Except Self.
Memory Usage: 12.5 MB, less than 93.94% of C++ online submissions for Product of Array Except Self.
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        
        vector<int> res(n, 1);
        for (int i = 1; i < n; i++) {
            res[i] = res[i - 1] * nums[i - 1];
        }
        
        int right = 1;
        for (int i = n - 1; i >= 0; i--) {
            res[i] *= right;
            right *= nums[i];
        }
        return res;
    }
};
