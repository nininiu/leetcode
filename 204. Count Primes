Runtime: 492 ms, faster than 13.22% of C++ online submissions for Count Primes.
Memory Usage: 10.6 MB, less than 12.50% of C++ online submissions for Count Primes.

class Solution {
public:
    int countPrimes(int n) {
        static vector<int> nums;
        if (n < 3)
            return 0;
        
        int res = 1;
        nums.push_back(2);
        for (int i = 3; i < n; i++) {
            if (isPrime(i, nums)) {
                nums.push_back(i);
                res++;
            }
        }
        return res;
    }
    
private:
    bool isPrime(int n, vector<int>& nums) {
        for (int i = 0; nums[i] <= sqrt(n); i++) {
            if (n % nums[i] == 0)
                return false;
        }
        return true;
    }
};

Runtime: 20 ms, faster than 95.37% of C++ online submissions for Count Primes.
Memory Usage: 21.6 MB, less than 8.33% of C++ online submissions for Count Primes.
class Solution {
public:
    int countPrimes(int n) {
        if (n < 3)
            return false;
        vector<int> f(n, 1);
        f[0] = f[1] = 0;
        for (int i = 2; i < sqrt(n); i++) {
            if (!f[i]) continue;
            for (int j = i * i; j < n; j += i) 
                f[j] = 0;
        }
        return accumulate(f.begin(), f.end(), 0);
    }
};;
