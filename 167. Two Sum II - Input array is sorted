class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); i++) {
            if (m.count(nums[i]))
                return vector<int>{m[nums[i]] + 1, i + 1};
            else
                m[target - nums[i]] = i;
        }
        return {-1, -1};
    }
};

//solution2:
//Runtime: 4 ms, faster than 96.96% of C++ online submissions for Two Sum II - Input array is sorted.
Memory Usage: 9.5 MB, less than 80.39% of C++ online submissions for Two Sum II - Input array is sorted.
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int l = 0, r = nums.size() - 1;
        while (l < r) {
            int sum = nums[l] + nums[r];
            if (sum == target)
                return vector<int>{l + 1, r + 1};
            if (sum < target)
                l++;
            else
                r--;
        }
        return {-1, -1};
    }
};
