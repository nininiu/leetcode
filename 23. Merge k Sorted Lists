Runtime: 236 ms, faster than 19.63% of C++ online submissions for Merge k Sorted Lists.
Memory Usage: 11.4 MB, less than 45.24% of C++ online submissions for Merge k Sorted Lists.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty())
            return NULL;
        if (lists.size() < 2)
            return lists[0];
        ListNode* res = lists[0];
        for (int i = 1; i <lists.size(); i++) {
            res = mergeTwo(res, lists[i]);
        }
        return res;
    }
    
private:
    ListNode* mergeTwo(ListNode* l1, ListNode* l2) {
        if (!l1 ||!l2) {
            return l1? l1 : l2;
        }
        
        if (l1->val < l2->val) {
            l1->next = mergeTwo(l1->next, l2);
            return l1;
        } else {
            l2->next = mergeTwo(l1, l2->next);
            return l2;
        }
    }
};
//solution 2 merge divede
Runtime: 20 ms, faster than 98.82% of C++ online submissions for Merge k Sorted Lists.
Memory Usage: 11.3 MB, less than 52.38% of C++ online submissions for Merge k Sorted Lists.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty())
            return NULL;
        int n = lists.size();
        while (n > 1) {
            int k = (n + 1) / 2;
            for (int i = 0; i < n / 2; i++) {
                lists[i] = mergeTwo(lists[i], lists[i + k]);
            }
            n = k;
        }
        return lists[0];
    }
    
private:
    ListNode* mergeTwo(ListNode* l1, ListNode* l2) {
        if (!l1 ||!l2) {
            return l1? l1 : l2;
        }
        
        if (l1->val < l2->val) {
            l1->next = mergeTwo(l1->next, l2);
            return l1;
        } else {
            l2->next = mergeTwo(l1, l2->next);
            return l2;
        }
    }
};



//solution3 priority queue
Runtime: 28 ms, faster than 67.72% of C++ online submissions for Merge k Sorted Lists.
Memory Usage: 11 MB, less than 72.62% of C++ online submissions for Merge k Sorted Lists.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.size() < 1)
            return NULL;
        auto cmp = [] (ListNode* a, ListNode* b) {
            return a->val > b->val;
        };
        
        priority_queue<ListNode*, vector<ListNode*>, decltype(cmp) > q(cmp);
        for (auto l : lists) {
            if (l) q.push(l);
        }
        
        ListNode *dummy = new ListNode(-1), *cur = dummy;
        while (!q.empty()) {
            ListNode* node = q.top(); q.pop();
            cur->next = node;
            cur = cur->next;
            if (cur->next)
                q.push(cur->next);
            //cur = cur->next;
        }
        return dummy->next;
    }
};


//solution 4 devide and conque
Runtime: 24 ms, faster than 90.68% of C++ online submissions for Merge k Sorted Lists.
Memory Usage: 11.4 MB, less than 38.09% of C++ online submissions for Merge k Sorted Lists.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        return helper(lists, 0, lists.size() - 1);
    }
    
private:
    ListNode* helper(vector<ListNode*>& lists, int start, int end) {
        if (start > end)
            return NULL;
        if (start == end)
            return lists[start];
        int mid = start + (end - start) / 2;
        ListNode* left = helper(lists, start, mid);
        ListNode* right = helper(lists, mid + 1, end);
        return mergeTwo(left, right);       
    }
    
    ListNode* mergeTwo(ListNode* l1, ListNode* l2) {
        if (!l1 ||!l2) {
            return l1? l1 : l2;
        }
        
        if (l1->val < l2->val) {
            l1->next = mergeTwo(l1->next, l2);
            return l1;
        } else {
            l2->next = mergeTwo(l1, l2->next);
            return l2;
        }
    }
};

