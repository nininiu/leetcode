//Solution 1: Brute Force
//Time complexity: O((n – k + 1) * k)
//Space complexity: O(1)
//Runtime: 160 ms, faster than 5.31% of C++ online submissions for Sliding Window Maximum.
//Memory Usage: 12.9 MB, less than 88.52% of C++ online submissions for Sliding Window Maximum.
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        for (int i = k - 1; i < nums.size(); i++) {
            res.push_back(*max_element(nums.begin() + i - k + 1, nums.begin() + i + 1));;
        }
        return res;
    }
};

Solution 2: BST
Time complexity: O((n – k + 1) * logk)
Space complexity: O(k)
Runtime: 76 ms, faster than 24.17% of C++ online submissions for Sliding Window Maximum.
Memory Usage: 18.2 MB, less than 8.20% of C++ online submissions for Sliding Window Maximum.
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        if (k < 1 || nums.empty())
            return res;
        multiset<int> window(nums.begin(), nums.begin() + k - 1);
        for (int i = k - 1; i < nums.size(); i++) {
            window.insert(nums[i]);
            res.push_back(*window.rbegin());
            //cout<<i<<endl;
            if (i - k + 1 >= 0)
                window.erase(window.equal_range(nums[i - k + 1]).first);
        }
        return res;
    }
};
Solution 3: Monotonic Queue
Time complexity: O(n)

Space complexity: O(k)
Runtime: 56 ms, faster than 83.88% of C++ online submissions for Sliding Window Maximum.
Memory Usage: 13.2 MB, less than 63.93% of C++ online submissions for Sliding Window Maximum.
class MonotonicQueue {
public:
    void push(int e) {
        while (!data_.empty() && e > data_.back()) {
            data_.pop_back();
        }
        data_.push_back(e);
    }
    
    void pop() {
        data_.pop_front();
    }
    
    int max() const {
        return data_.front();
    }
    
private:
    deque<int> data_;
};

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        if (k < 1 || nums.empty())
            return res;
        MonotonicQueue q;
        
        for (int i = 0; i < nums.size(); i++) {
            q.push(nums[i]);
            if (i - k + 1 >= 0) {
                res.push_back(q.max());
                if (nums[i - k + 1] == q.max())
                    q.pop();
            }
        }
        return res;
    }
};

//solution4
Runtime: 60 ms, faster than 55.03% of C++ online submissions for Sliding Window Maximum.
Memory Usage: 13 MB, less than 86.89% of C++ online submissions for Sliding Window Maximum.
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        if (k < 1 || nums.empty())
            return res;
        deque<int> q;
        
        for (int i = 0; i < nums.size(); i++) {
            while (!q.empty() && nums[i] > q.back()) {
                q.pop_back();
            }
            q.push_back(nums[i]);
            if (i - k + 1 >= 0) {
                res.push_back(q.front());
                if (nums[i - k + 1] == q.front())
                    q.pop_front();
            }
        }
        return res;
    }
};

//solution 5
Runtime: 60 ms, faster than 55.03% of C++ online submissions for Sliding Window Maximum.
Memory Usage: 13.2 MB, less than 73.77% of C++ online submissions for Sliding Window Maximum.
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        if (k < 1 || nums.empty())
            return res;
        deque<int> q;
        
        for (int i = 0; i < nums.size(); i++) {
            while (!q.empty() && nums[i] >= nums[q.back()]) {
                q.pop_back();
            }
            q.push_back(i);
            if (i - k + 1 >= 0) {
                res.push_back(nums[q.front()]);
            }
            if (i - k + 1 >= q.front())
                q.pop_front();
        }
        return res;
    }
};
